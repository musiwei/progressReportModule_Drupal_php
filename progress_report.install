<?php

/**
 * @file
 * Install file for Node Example module.
 *
 * The definition of the fields for the module is here,
 *
 * @see http://drupal.org/node/707832
 * @see http://drupal.org/node/443536
 * @see field
 */

/**
 * Implements hook_install().
 *
 * This hook is called when the user enables the module for the first time
 * (or on subsequent enables after the module has been uninstalled). So it's
 * a good place to define our new node type.
 *
 * We will:
 * - Add the body field.
 * - Configure the body field.
 * - Create color, quantity, and image fields.
 * - Create color, quantity, and image instances.
 *
 * @see node_type_set_defaults()
 * @see field_info_instance()
 * @see field_update_instance()
 * @see field_create_field()
 * @see field_create_instance()
 * @ingroup progress_report
 */
function progress_report_install() {
  // During installation, the t() function is unavailable, so we use get_t()
  // to store the name of the translation function.
  $t = get_t();
  /**  Set the defaul publishing option
    *  Publishing options (core functional)
    *  ------------------------------------
    *
    *  Default options
    *    node_options_{$type}
    *    value <array>:
    *      array('status', 'promote', 'sticky', 'revision')
    */
  variable_set('node_options_project', array('revision'));       // set project node default option as unpublished since the 'project' content is always empty.
  variable_set('node_options_progress_report', array('status')); // set progress_report node default option as published, because we want the user can read certain reports.
                                                                 // we implement some 3rd level codes to restrict people not related to the particular project from viewing the progress report.
                                                                 // See hook_node_access() in .module file for more information.
  // We define the node type as an associative array.
  $project = array(
    'type' => 'project',
    'name' => $t('Project'),
    // 'base' tells Drupal the base string for hook functions.
    // This is often the module name; if base is set to 'mymodule', Drupal
    // would call mymodule_insert() or similar for node hooks.
    // In this case, we set base equal to 'node_content' so Drupal will handle
    // our node as if we had designed it in the UI.
    'base' => 'node_content',
    'description' => $t('This is a project record created for certain users.'),
    'title_label' => $t('Project name'),
	'custom' => TRUE,
  );
  
  $progress_report = array(
    'type' => 'progress_report',
    'name' => $t('Progress report'),
    // 'base' tells Drupal the base string for hook functions.
    // This is often the module name; if base is set to 'mymodule', Drupal
    // would call mymodule_insert() or similar for node hooks.
    // In this case, we set base equal to 'node_content' so Drupal will handle
    // our node as if we had designed it in the UI.
    'base' => 'node_content',
    'description' => $t('This is a single progress report that can be assigned to a particular project.'),
    'title_label' => $t('Title'),
	'custom' => TRUE,
  );

  // Complete the node type definition by setting any defaults not explicitly
  // declared above.
  // http://api.drupal.org/api/function/node_type_set_defaults/7
  $content_type_1 = node_type_set_defaults($project);
  //We add a body field and set the body label immediately.
  //node_add_body_field($content_type_1, $t('Project'));
  // Save the content type
  node_type_save($content_type_1);
  
  $content_type_2 = node_type_set_defaults($progress_report);
  node_add_body_field($content_type_2, $t('Progress report'));
  node_type_save($content_type_2);


  // Load the instance definition for our content type's body
  // http://api.drupal.org/api/function/field_info_instance/7
  //$body_instance_1 = field_info_instance('node', 'body', 'project');
  $body_instance_2 = field_info_instance('node', 'body', 'progress_report');

  //As an alternative for node_add_body_field($type, $label = 'Body')
  //the 'label'-key can be used to set the body label on the field instance
  //$body_instance['label'] = $t('Example Description');

  // Add our progress_report_list view mode to the body instance display by
  // instructing the body to display as a summary
  /*$body_instance_1['display']['project_list'] = array(
    'label' => 'hidden',
    'type' => 'text_default',
  );*/
  $body_instance_2['display']['progress_report_list'] = array(
    'label' => 'hidden',
    'type' => 'text_summary_or_trimmed',
  );

  // Save our changes to the body field instance.
  // http://api.drupal.org/api/function/field_update_instance/7
  //field_update_instance($body_instance_1);
  field_update_instance($body_instance_2);

  // Create all the fields we are adding to our content type.
  // http://api.drupal.org/api/function/field_create_field/7
  foreach (_project_installed_fields() as $field_1) {
    field_create_field($field_1);
  }
  foreach (_progress_report_installed_fields() as $field_2) {
    field_create_field($field_2);
  }

  // Create all the instances for our fields.
  // http://api.drupal.org/api/function/field_create_instance/7
  foreach (_project_installed_instances() as $instance_1) {
    $instance_1['entity_type'] = 'node';
    $instance_1['bundle'] = $project['type'];
    field_create_instance($instance_1);
  }
  foreach (_progress_report_installed_instances() as $instance_2) {
    $instance_2['entity_type'] = 'node';
    $instance_2['bundle'] = $progress_report['type'];
    field_create_instance($instance_2);
  }
}
/**
 * Implements hook_uninstall().
 *
 * This hook is called when the user not only has disabled the module,
 * but also uninstalls it from the 'uninstall' tab in the module page.
 *
 * So it's a perfect time to remove our fields and instances and new
 * node type from the database.
 *
 * @ingroup progress_report
 */
function progress_report_uninstall() {
    uninstall_project();
    uninstall_progess_report();  
}

function uninstall_project(){
    // Gather all the example content that might have been created while this
  // module was enabled.  Simple selects still use db_query().
  // http://api.drupal.org/api/function/db_query/7
  $sql = 'SELECT nid FROM {node} n WHERE n.type = :type';
  $result = db_query($sql, array(':type' => 'project'));
  $nids = array();
  foreach ($result as $row) {
    $nids[] = $row->nid;
  }

  // Delete all the nodes at once
  // http://api.drupal.org/api/function/node_delete_multiple/7
  node_delete_multiple($nids);

  // Loop over each of the fields defined by this module and delete
  // all instances of the field, their data, and the field itself.
  // http://api.drupal.org/api/function/field_delete_field/7
  foreach (array_keys(_project_installed_fields()) as $field) {
    field_delete_field($field);
  }

  // Loop over any remaining field instances attached to the progress_report
  // content type (such as the body field) and delete them individually.
  // http://api.drupal.org/api/function/field_delete_field/7
  $instances = field_info_instances('node', 'project');
  foreach ($instances as $instance_name => $instance) {
    field_delete_instance($instance);
  }

  // Delete our content type
  // http://api.drupal.org/api/function/node_type_delete/7
  node_type_delete('project');

  // Purge all field infromation
  // http://api.drupal.org/api/function/field_purge_batch/7
  field_purge_batch(1000);
}

function uninstall_progess_report(){
  // Gather all the example content that might have been created while this
  // module was enabled.  Simple selects still use db_query().
  // http://api.drupal.org/api/function/db_query/7
  $sql = 'SELECT nid FROM {node} n WHERE n.type = :type';
  $result = db_query($sql, array(':type' => 'progress_report'));
  $nids = array();
  foreach ($result as $row) {
    $nids[] = $row->nid;
  }

  // Delete all the nodes at once
  // http://api.drupal.org/api/function/node_delete_multiple/7
  node_delete_multiple($nids);

  // Loop over each of the fields defined by this module and delete
  // all instances of the field, their data, and the field itself.
  // http://api.drupal.org/api/function/field_delete_field/7
  foreach (array_keys(_progress_report_installed_fields()) as $field) {
    field_delete_field($field);
  }

  // Loop over any remaining field instances attached to the progress_report
  // content type (such as the body field) and delete them individually.
  // http://api.drupal.org/api/function/field_delete_field/7
  $instances = field_info_instances('node', 'progress_report');
  foreach ($instances as $instance_name => $instance) {
    field_delete_instance($instance);
  }

  // Delete our content type
  // http://api.drupal.org/api/function/node_type_delete/7
  node_type_delete('progress_report');

  // Purge all field infromation
  // http://api.drupal.org/api/function/field_purge_batch/7
  field_purge_batch(1000);
}

/**
 * Returns a structured array defining the fields created by this content type.
 *
 * This is factored into this function so it can be used in both
 * progress_report_install() and progress_report_uninstall().
 *
 * @return
 *  An associative array specifying the fields we wish to add to our
 *  new node type.
 *
 * @ingroup progress_report
 */
function _project_installed_fields() {
  $t = get_t();
  return array(
    'project_dev_phase' => array(
      'field_name'  => 'project_dev_phase',
      'type'        => 'list_integer',
      'cardinality' => 1,
      'settings' => array(
        'allowed_values' => array(
          0 => t('Pending'),
          1 => t('Developing'),
          2 => t('Final test'),
          3 => t('Completed'),
          ),
        ),
    ),
    'project_description' => array(
      'field_name'  => 'project_description',
      'cardinality' => 1,
      'type'        => 'text',
    ), 
   'project_related_user' => array(
      'field_name'  => 'project_related_user',
      'cardinality' => FIELD_CARDINALITY_UNLIMITED,
      'type'        => 'text',
    ), 
  );
}

function _progress_report_installed_fields() {
  $t = get_t();
  return array(
    'progress_report_pid' => array(
      'field_name'  => 'progress_report_pid',
      'cardinality' => 1,
      'type'        => 'list_integer',
    ),
  );
}

/**
 * Returns a structured array defining the instances for this content type.
 *
 * The instance lets Drupal know which widget to use to allow the user to enter
 * data and how to react in different view modes.  We are going to display a
 * page that uses a custom "progress_report_list" view mode.  We will set a
 * cardinality of three allowing our content type to give the user three color
 * fields.
 *
 * This is factored into this function so it can be used in both
 * progress_report_install() and progress_report_uninstall().
 *
 * @return
 *  An associative array specifying the instances we wish to add to our new
 *  node type.
 *
 * @ingroup progress_report
 */
function _project_installed_instances() {
  $t = get_t();
  return array(
    'project_description' => array(
      'field_name'  => 'project_description',
      'label' => $t('Description'),
      'type'        => 'text',
      'widget'      => array(
        'type'    => 'text_textfield',
      ),
      'display' => array(
        'project_description' => array(
          'label' => 'above',
          'type' => 'hidden',
        ),
      ),
    ),
    'project_dev_phase' => array(
      'field_name'  => 'project_dev_phase',
      'label' => $t('Development phase'),
      'type'        => 'list_integer',
      'required' => TRUE,
      'widget'      => array(
        'type'    => 'options_buttons',
      ),
      'default_value' => array(array('value' => 0)),
      'display' => array(
        'progress_report_list' => array(
          'label' => 'above',
          'type' => 'hidden',
        ),
      ),
    ),
    'project_related_user' => array(
      'field_name'  => 'project_related_user',
      'label' => $t('Related user'),
      'type'        => 'text',
      'required' => TRUE,
      'widget'      => array(
        'type'    => 'text_textfield',
      ),
      'display' => array(
        'project_related_user' => array(
          'label' => 'inline',
          'type' => 'hidden',
        ),
      ),
    ),
  );
}

function _progress_report_installed_instances() {
  $t = get_t();
  return array(
    'progress_report_pid' => array(
      'field_name'  => 'progress_report_pid',
      'label' => $t('Project name'),
      'type'        => 'list_integer',
      'required' => TRUE,
      'widget'      => array(
        'type'    => 'options_select',
        'weight' => -1,
      ),
      'display' => array(
        'progress_report_list' => array(
          'label' => 'hidden',
          'type' => 'hidden',
        ),
      ),
    ),
  );
}
